#include <iostream> 
#include<vector>
#include<unordered_map>

using namespace std;

class Node {
public:
    vector<Node*> nums;
    vector<string> recents;
    Node() {
        for (int i = 0; i <2; i++) {
            nums.push_back(nullptr);
        }
    }
};

class Trie {
public:
    Node* root;
    vector<string> all_strings;
    unordered_map<string, int> positions;
    int pos;
    Trie() {
        root = new Node();
        pos = 1;
    }
    void add_node(string s) {
        Node* temp = root;
        for (auto i : s) {
            if (!temp->nums[i - '0']) {
                Node* new_node = new Node();
                temp->nums[i - '0'] = new_node;
                temp = temp->nums[i - '0'];
                temp->recents.push_back(s);
            }
            else {
                temp = temp->nums[i - '0'];
                temp->recents.push_back(s);
            }
        }
        all_strings.push_back(s);
        positions[s] = pos++;
    }
};

vector<int> search_bin(vector<string> s) {
    Trie t;
    vector<int> answer;
    t.add_node(s[0]);
    answer.push_back(0);
    for (int i = 1; i < s.size(); i++) {
        string search = s[i];
        Node* temp = t.root;
        for (auto j : search) {
            if (temp->nums[j - '0']) {
                temp = temp->nums[j - '0'];
            }
            else break;
        }
        if (temp->recents.size()) answer.push_back(t.positions[temp->recents.back()]);
        else answer.push_back(t.positions[t.all_strings.back()]);
        t.add_node(search);
    }
    return answer;
}

int main()
{
    vector<string> binaries{ "00111100001011111100001","1000011101111111","00101","0010","1110101","101001101","101100011101110","0011000000101111110100001","00010110100100101100110101110","011011011101100111","100010","11100100100010101110010101110","10000","011010001011011011001101","000010000110","10011111","1111110100","001000101010","01100110100110011","000010","000011011000","11011100011111101","1110000010000001111","0011101111000","11100","1110100110010110100111","0111101000","0001100101111110","0","11110111","00100100101010001","010011101011100","001110","10","1","01110101010000111001010101001","111100101011000","0000110100101101","01111001","101110000000010010111101","101010110011101111100","11110011010110101110","11111101","01001001011100100111","0","0011100010101100","111001101000100110","010","00000100001101","01110001000001101001111","000011111","01010010010011011","0010111111010010","11000111100001110001110100","0100","101010011111111","0000110010001011101100101","00","1100","1001010110001010","1011100101011111011000","1111010111110100111111111110","1111011000100110","0100101100","10011011011001010101111","00001010110100111001","100110000000110100010","011010011001101011000000011","010100011000001011011","10110011011101","00111011110111010","1011","100000110010010001111111100001","1011011001110100","000110000","110101110001001","0000110100110111","000001000011","01000000110101111110101","0","0110001010101000","1011101100","011101010100000011110000110000","011011100011110001101010101000","0011000100100110001100010","110111010110101100010101011","101000011100111101011110111","00100101100010100110001","10000","0001110011000111010010","0111100","0101110000010100","1110011010010","0010001111110010111011000","0101000010111","1100000011101011100","011111000010111111","10000010101101","00010","010000010100001101110" };
    vector<int> answer = search_bin(binaries);
    for (auto i : answer) cout << i << " ";
    return 0;
}