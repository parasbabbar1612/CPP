
#include <iostream>
#include <conio.h>
#include <algorithm>

using namespace std;
class Node
{
public:
	int val;
	Node *left,*right;
	Node(int x)
	{
		val = x;
		left = NULL;
		right = NULL;
	}
	};
void inorder(Node* node)
{
	if (node == NULL)
		return;
	inorder(node->left);
	cout <<node->val << " ";
	inorder(node->right);
}
void preorder(Node* node)
{
	if (node == NULL)
		return;
	cout << node->val << " ";
	preorder(node->left);
	preorder(node->right);
}
void postorder(Node* node)
{
	if (node == NULL)
		return;
	postorder(node->left);
	postorder(node->right);
	cout <<node->val << " ";

}
void searchmin(Node *node)
{
	while (node->left != NULL)
	{
		node = node->left;
	}
	cout << node->val;
}
void searchmax(Node* node)
{
	while (node->right != NULL)
	{
		node = node->right;
	}
	cout << node->val;
}
int findmaxdepth(Node* node)
{
	int lh, rh;
	if (node == NULL) return 0;
	lh = findmaxdepth(node->left);
	rh = findmaxdepth(node->left);
	return max(lh, rh)+1;
}

int main()
{
	Node *root =new Node(8);
	root->left = new Node(5);
	root->left->left = new Node(3);
	root->left->right = new Node(6);
	root->right = new Node(11);
	root->right->left = new Node(9); 
	root->right->right = new Node(12);
	inorder(root);
	cout << "\n";
	preorder(root);
	cout << "\n";
	postorder(root);
	cout << "\n Minimum node is";
	searchmin(root);
	cout << "\n Maximum node is";
	searchmax(root);
	cout << "\n Depth of tree is" << findmaxdepth(root);
}
